// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/email.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_SendEmail_FullMethodName              = "/emailpb.EmailService/SendEmail"
	EmailService_SendEmailWithTemplate_FullMethodName  = "/emailpb.EmailService/SendEmailWithTemplate"
	EmailService_SendBulkEmail_FullMethodName          = "/emailpb.EmailService/SendBulkEmail"
	EmailService_ResendEmail_FullMethodName            = "/emailpb.EmailService/ResendEmail"
	EmailService_CreateEmailTemplate_FullMethodName    = "/emailpb.EmailService/CreateEmailTemplate"
	EmailService_GetEmailTemplate_FullMethodName       = "/emailpb.EmailService/GetEmailTemplate"
	EmailService_GetEmailTemplateByCode_FullMethodName = "/emailpb.EmailService/GetEmailTemplateByCode"
	EmailService_UpdateEmailTemplate_FullMethodName    = "/emailpb.EmailService/UpdateEmailTemplate"
	EmailService_DeleteEmailTemplate_FullMethodName    = "/emailpb.EmailService/DeleteEmailTemplate"
	EmailService_ListEmailTemplates_FullMethodName     = "/emailpb.EmailService/ListEmailTemplates"
	EmailService_GetEmailLog_FullMethodName            = "/emailpb.EmailService/GetEmailLog"
	EmailService_ListEmailLogs_FullMethodName          = "/emailpb.EmailService/ListEmailLogs"
	EmailService_GetEmailStats_FullMethodName          = "/emailpb.EmailService/GetEmailStats"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *********************************************
//
//	Email service               *
//
// ********************************************
type EmailServiceClient interface {
	// Email sending operations
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	SendEmailWithTemplate(ctx context.Context, in *SendEmailWithTemplateRequest, opts ...grpc.CallOption) (*SendEmailWithTemplateResponse, error)
	SendBulkEmail(ctx context.Context, in *SendBulkEmailRequest, opts ...grpc.CallOption) (*SendBulkEmailResponse, error)
	ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error)
	// Email template operations
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error)
	GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error)
	GetEmailTemplateByCode(ctx context.Context, in *GetEmailTemplateByCodeRequest, opts ...grpc.CallOption) (*GetEmailTemplateByCodeResponse, error)
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error)
	ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesRequest, opts ...grpc.CallOption) (*ListEmailTemplatesResponse, error)
	// Email log operations
	GetEmailLog(ctx context.Context, in *GetEmailLogRequest, opts ...grpc.CallOption) (*GetEmailLogResponse, error)
	ListEmailLogs(ctx context.Context, in *ListEmailLogsRequest, opts ...grpc.CallOption) (*ListEmailLogsResponse, error)
	GetEmailStats(ctx context.Context, in *GetEmailStatsRequest, opts ...grpc.CallOption) (*GetEmailStatsResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendEmailWithTemplate(ctx context.Context, in *SendEmailWithTemplateRequest, opts ...grpc.CallOption) (*SendEmailWithTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailWithTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_SendEmailWithTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendBulkEmail(ctx context.Context, in *SendBulkEmailRequest, opts ...grpc.CallOption) (*SendBulkEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendBulkEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_ResendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateRequest, opts ...grpc.CallOption) (*CreateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_CreateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateRequest, opts ...grpc.CallOption) (*GetEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailTemplateByCode(ctx context.Context, in *GetEmailTemplateByCodeRequest, opts ...grpc.CallOption) (*GetEmailTemplateByCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTemplateByCodeResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailTemplateByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateRequest, opts ...grpc.CallOption) (*UpdateEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_UpdateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*DeleteEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailTemplateResponse)
	err := c.cc.Invoke(ctx, EmailService_DeleteEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesRequest, opts ...grpc.CallOption) (*ListEmailTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailTemplatesResponse)
	err := c.cc.Invoke(ctx, EmailService_ListEmailTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailLog(ctx context.Context, in *GetEmailLogRequest, opts ...grpc.CallOption) (*GetEmailLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailLogResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) ListEmailLogs(ctx context.Context, in *ListEmailLogsRequest, opts ...grpc.CallOption) (*ListEmailLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailLogsResponse)
	err := c.cc.Invoke(ctx, EmailService_ListEmailLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) GetEmailStats(ctx context.Context, in *GetEmailStatsRequest, opts ...grpc.CallOption) (*GetEmailStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailStatsResponse)
	err := c.cc.Invoke(ctx, EmailService_GetEmailStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
//
// *********************************************
//
//	Email service               *
//
// ********************************************
type EmailServiceServer interface {
	// Email sending operations
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	SendEmailWithTemplate(context.Context, *SendEmailWithTemplateRequest) (*SendEmailWithTemplateResponse, error)
	SendBulkEmail(context.Context, *SendBulkEmailRequest) (*SendBulkEmailResponse, error)
	ResendEmail(context.Context, *ResendEmailRequest) (*ResendEmailResponse, error)
	// Email template operations
	CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error)
	GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error)
	GetEmailTemplateByCode(context.Context, *GetEmailTemplateByCodeRequest) (*GetEmailTemplateByCodeResponse, error)
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error)
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error)
	ListEmailTemplates(context.Context, *ListEmailTemplatesRequest) (*ListEmailTemplatesResponse, error)
	// Email log operations
	GetEmailLog(context.Context, *GetEmailLogRequest) (*GetEmailLogResponse, error)
	ListEmailLogs(context.Context, *ListEmailLogsRequest) (*ListEmailLogsResponse, error)
	GetEmailStats(context.Context, *GetEmailStatsRequest) (*GetEmailStatsResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendEmailWithTemplate(context.Context, *SendEmailWithTemplateRequest) (*SendEmailWithTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailWithTemplate not implemented")
}
func (UnimplementedEmailServiceServer) SendBulkEmail(context.Context, *SendBulkEmailRequest) (*SendBulkEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkEmail not implemented")
}
func (UnimplementedEmailServiceServer) ResendEmail(context.Context, *ResendEmailRequest) (*ResendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmail not implemented")
}
func (UnimplementedEmailServiceServer) CreateEmailTemplate(context.Context, *CreateEmailTemplateRequest) (*CreateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailTemplate(context.Context, *GetEmailTemplateRequest) (*GetEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailTemplateByCode(context.Context, *GetEmailTemplateByCodeRequest) (*GetEmailTemplateByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplateByCode not implemented")
}
func (UnimplementedEmailServiceServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateRequest) (*UpdateEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*DeleteEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedEmailServiceServer) ListEmailTemplates(context.Context, *ListEmailTemplatesRequest) (*ListEmailTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailTemplates not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailLog(context.Context, *GetEmailLogRequest) (*GetEmailLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailLog not implemented")
}
func (UnimplementedEmailServiceServer) ListEmailLogs(context.Context, *ListEmailLogsRequest) (*ListEmailLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailLogs not implemented")
}
func (UnimplementedEmailServiceServer) GetEmailStats(context.Context, *GetEmailStatsRequest) (*GetEmailStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailStats not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendEmailWithTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailWithTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendEmailWithTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendEmailWithTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendEmailWithTemplate(ctx, req.(*SendEmailWithTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendBulkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendBulkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendBulkEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendBulkEmail(ctx, req.(*SendBulkEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ResendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ResendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ResendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ResendEmail(ctx, req.(*ResendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).CreateEmailTemplate(ctx, req.(*CreateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailTemplate(ctx, req.(*GetEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailTemplateByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailTemplateByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailTemplateByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailTemplateByCode(ctx, req.(*GetEmailTemplateByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ListEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListEmailTemplates(ctx, req.(*ListEmailTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailLog(ctx, req.(*GetEmailLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_ListEmailLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).ListEmailLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_ListEmailLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).ListEmailLogs(ctx, req.(*ListEmailLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_GetEmailStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetEmailStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetEmailStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetEmailStats(ctx, req.(*GetEmailStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emailpb.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailService_SendEmail_Handler,
		},
		{
			MethodName: "SendEmailWithTemplate",
			Handler:    _EmailService_SendEmailWithTemplate_Handler,
		},
		{
			MethodName: "SendBulkEmail",
			Handler:    _EmailService_SendBulkEmail_Handler,
		},
		{
			MethodName: "ResendEmail",
			Handler:    _EmailService_ResendEmail_Handler,
		},
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _EmailService_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailTemplate",
			Handler:    _EmailService_GetEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailTemplateByCode",
			Handler:    _EmailService_GetEmailTemplateByCode_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _EmailService_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _EmailService_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "ListEmailTemplates",
			Handler:    _EmailService_ListEmailTemplates_Handler,
		},
		{
			MethodName: "GetEmailLog",
			Handler:    _EmailService_GetEmailLog_Handler,
		},
		{
			MethodName: "ListEmailLogs",
			Handler:    _EmailService_ListEmailLogs_Handler,
		},
		{
			MethodName: "GetEmailStats",
			Handler:    _EmailService_GetEmailStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/email.proto",
}
